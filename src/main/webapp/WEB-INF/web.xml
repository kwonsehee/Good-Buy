<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- 프로젝트 시작 위치 -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	<!-- 1. 웹 어플리케이션이 실행 되면 Tomcat(WAS)에 의해 web.xml이 loading -->
	<!-- 2. web.xml에 등록되어 있는 contextLoaderListener(JavaClass)가 생성 
	 	    ContextLoaderListener 클래스는 ServletContextListener 인터페이스를 구현하고 있으며,
	 	    ApplicationContext를 생성하는 역할을 수행함-->
	<!-- 3. 생성된 ContextLoaderListener는 root-context.xml을 loading -->
	<!-- 4. root-context.xml에 등록되어 있는 Spring Container가 구동
		 이 때, 개발자가 작성한 비지니스로직에 대한 부분과 DAO/VO 객체등이 생성 -->
		
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
		/WEB-INF/spring/root-context.xml
		/WEB-INF/spring/spring-security.xml
		</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 5. 클라이언트로부터 웹 어플리케이션 요청 -->
	<!-- 6. DispatcherServlet이 생성 
			DispatcherServlet은 FrontController의 역할 수행
			클라이언트로부터 요청 온 메세지를 분석하여 알맞는 PageController에게 전달하고 
			응답을 받아 요청에 따른 응답을 어떻게 할지 결정(HandlerMapping, ViewResolver클래스)-->
	<!-- 7. DispatcherServlet은 servlet-context.xml을 loading -->
	<!-- 8. 두번째 Spring Container가 구동되며 응답에 맞는 PageController동작
			첫번째 Spring Container가 구동되면서 생성된 여러 클래스와 협업하여 알맞은 작업처리 -->
		
	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- 공용 에러페이지 등록 -->
	<error-page>
		<!-- 모든 Exception에 대해서 -->
		<exception-type>java.lang.Exception</exception-type>
		<!-- errorpage.jsp로 -->
		<location>/WEB-INF/views/common/errorpage.jsp</location>
	</error-page>
	
	  <!-- 한글 깨짐 방지 인코딩 필터 설정 -->
   <!-- 우리가 직접 필터를 만들어서 등록해도 되지만, 스프링에서 인코딩용 필터를 제공하고 있기 때문에
         web.xml에 필터로 등록만 하고 사용하면 된다 -->
         
      <filter>
         <!-- 필터 네임은 원하는대로 지정 -->
         <filter-name>encodingFilter</filter-name>
         <!-- 필터 클래스는 필터로 사용할 클래스 풀 네임(패키지 포함) -->
         <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
         <init-param>
            <!-- encoding 값을 UTF-8로 지정 -->
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
         </init-param>
         <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
         </init-param>
      </filter>
      <!-- 어떤 요청에 대해서 위에서 등록한 필터를 사용할 것인지 -->
      <filter-mapping>
         <filter-name>encodingFilter</filter-name>
         <!-- /* <<<<<< 모든요청에대해서 해라 -->
         <url-pattern>/*</url-pattern>
      </filter-mapping>

	
</web-app>
